#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('socket:server');
var http = require('http');
const uuidv4 = require('uuid/v4');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
// var io = require('socket.io').listen(server)
var io = require('socket.io')(server)
global.messageList = []
var hasReadList = {}
global.hasReadList = hasReadList

io.on('connection', function (socket) {
  socket.on('join', function (data) {
    var sid = data.uuid
    socket.id = sid
  })
  socket.on('send_msg', function (data) {
    var uuid = uuidv4()
    data.id = uuid
    data.from = socket.id
    var time = new Date(data.time)
    data.time = time.getFullYear() + '/' + (time.getMonth() + 1) + '/' + (time.getDate()) + '  ' +
        ('0' + time.getHours()).substr(-2) + ':' + ('0' + time.getMinutes()).substr(-2) + ":" + ('0' + time.getSeconds()).substr(-2)

    // console.log('message:', data)
    global.messageList.push(data)
    // 要将消息发给除特定 socket 外的其他用户
    // socket.broadcast.emit('message', data)
    // 我们将消息发送给所有用户，包括发送者。
    // io.sockets.emit('message', data)
    io.emit('message', data)
  })
  socket.on('read_msg', function (data) {
    var id = data.id
    var sid = socket.id
    if (!hasReadList[sid]) {
      hasReadList[sid] = []
    }
    if (hasReadList[sid].indexOf(id) === -1) {
      hasReadList[sid].push(id)
    }
  })
  // io.sockets.socket(socketid).emit(‘message’, ‘for your eyes only’);
})




/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
